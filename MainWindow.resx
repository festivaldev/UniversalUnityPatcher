<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIEAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZCgAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTExM3ExMTehQU
        FL8VFRX4Dw8PQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4OJREREWkTExOtExMT7hUV
        Ff8WFhb/FhYW/xYWFv8RERGHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0NDRQPDw9XEhISmxMTE+AUFBT/FRUV/xUV
        Ff8VFRX/FRUV/xUVFf8VFRX/FRUV/xMTE8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQOFBQU6BQUFP8UFBT/FBQU/xQU
        FP8UFBT/FBQU/xQUFP8UFBT/FBQU/xQUFP8UFBT/ExMT/QAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUVFYcUFBT/FBQU/xQU
        FP8UFBT/EhIS/zExMf9oaGj/TE1N/xMTE/8TExP/ExMT/xMTE/8TExP/Dw8PVgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8hFBQU9xIS
        Ev8rKyv/Z2dn/6Ojo//h4eH//f39/9PT0/8jIyP/ExMT/xMTE/8XFxf/ExMT/xISEv8RERGaAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQfRQUFOcUFBTlFRUV5Ds7
        O+6bnJz/2dnZ//39/f/+/v7////////////z8/P/ZWZm/xMTE/8TExP/Kysr/3t8fP8SEhL/EhIS/xAQ
        EN8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8PD4QSEhL/ExMT/xQU
        FP88PDz/6enp/////////////////////////////f39/7i4uP8XGBj/ExMT/xISEv+qqqr/ycnJ/xAQ
        EP8RERH/EBAQ/w0NDSYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDw+GEhIS/xMT
        E/8UFBT/Ojo6/+np6f/////////////////////////////////q6ur/RkdH/xQUFP8UFBT/SkpK//r6
        +v/19fX/KCgo/xEREf8RERH/Dg4OawAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw8PhhIS
        Ev8TExP/FBQU/zg4OP/n5+f/////////////////////////////////+/v7/5qamv8UFBT/FRUV/xUV
        Ff/Mzc3///////z8/P9iY2P/ERER/xEREf8ODg6wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8P
        D4cSEhL/ExMT/xQUFP81NTX/5eXl//////////////////////////////////7+/v/e3t7/MDAw/xcX
        F/8WFhb/bW1t//39/f///////v7+/6Ojo/8RERH/ERER/w8PD/AAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAPDw+HERER/xMTE/8UFBT/MjIy/+Hh4f//////////////////////////////////////9/f3/3l5
        ef8ZGRn/GBgY/yQkJP/l5eX/////////////////5OTk/xMTE/8RERH/Dw8P/hAQECAAAAAAAAAAAAAA
        AAAAAAAADw8PiBEREf8SEhL/FBQU/ygoKP+4ubn/1NXV/9XW1v/V1tb/1dbW/9XW1v/V1tb/1dbW/9XV
        1f+5ubn/JCQk/xwcHP8bGxv/kpKS//7+/v/////////////////5+fn/QEBA/xEREf8RERGjAAAAAAAA
        AAAAAAAAAAAAAA8PD4kQEBD/EhIS/xMTE/8VFRX/ISEh/yoqKv8rKyv/LCws/y0tLf8uLi7/Li8v/y8v
        L/8vLy//Ly8v/ygoKP8fHx//Hx8f/zs7O//19fX///////////////////////7+/v9+fn7/EhIS8h0d
        HRoAAAAAAAAAAAAAAAEPDw9lEBAQ/xEREf8TExP/FRUV/xYWFv8YGBj/Ghoa/xwcHP8eHh7/Hx8f/yAg
        IP8iIiL/IiIi/yMjI/8jIyP/IyMj/yMjI/8iIiL/kJGR//39/f///////////////////////v7+/62t
        rf8UFBSLAAAAAAAAAAAAAAAAAAAAAQAAAAkPDw+7EhIS/xQUFP8WFhb/GBgY/xgYGP8ZGRn/Gxsb/xwc
        HP8eHh7/Hx8f/yAgIP8hISH/IiIi/yIiIv8jIyP/JiYm/yUlJf9LS0v/6enp////////////////////
        ///8/Pz/gICA/xMTE98cHBwJAAAAAAAAAAAAAAAAAAAAAAAAAAkQEBC7FhYW/xgYGP8aGhr/PT09/8LC
        wv/n5+f/6urq/+rq6v/q6ur/6urq/+rq6v/r6+v/6+vr/8fHx/8rKyv/KSkp/yYmJv+Xl5f/+vr6////
        //////////////Pz8/9JSUn/FhYW/xISEn8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkUFBS7Ghoa/x0d
        Hf8fHx//SkpK/9bW1v/9/f3//////////////////////////////////f39/31+fv8tLS3/LCws/zo6
        Ov/c3Nz//v7+////////////39/f/x4eHv8XFxf/FRUV9gsLCxgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAkXFxe6Hx8f/yIiIv8lJSX/UFBQ/9jY2P/9/f3/////////////////////////////////6enp/zw8
        PP8vLy//LS0t/3p7e//29vb///////7+/v+lpqb/HBwc/xkZGf8UFBT5AAAACwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABwcHAkbGxu6JSUl/ygoKP8rKyv/VlZW/9ra2v/+/v7/////////////////////////
        ///+/v7/np6e/zMzM/8xMTH/MjIy/8fHx//+/v7/+fn5/2xsbP8dHR3/Ghoa/xQUFMAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHAkfHx+6Kysr/y4uLv8yMjL/XFxc/9zc3P/+/v7/////////
        ///////////////////39/f/UVFR/zU1Nf8xMTH/YmNj/+/v7//t7e3/PDw8/yAgIP8cHBz/ERERewAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHAkkJCS6MjIy/zU1Nf84ODj/YWFh/93d
        3f/9/f3//v7+//////////////////7+/v+/v7//Nzc3/zU1Nf8wMDD/rq6u/8jIyP8jIyP/ISEh/x0d
        Hf8JCQk3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkJAcnJye1ODg4/zs7
        O/8+Pj7/YGBg/6anp//P0ND/5+fn//b29v/9/f3//v7+//z8/P9xcXH/ODg4/zQ0NP9KS0v/goKC/ycn
        J/8jIyP/Gxsb7QAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoq
        KgYqKiorLy8vKz09PSo8PDxeRUVF/0tLS/9iYmL/gYGB/6ysrP/S0tL/6enp/9XV1f89PT3/NjY2/zEx
        Mf82Njb/KSkp/yUlJf8ZGRmrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJSUm5Tk5O/1BQUP9PT0//SUlJ/01NTf9jZGT/hISE/2Zm
        Zv84ODj/NDQ0/y8vL/8rKyv/JiYm/xQUFGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9PTy1RUVH8U1NT/1FRUf9PT0//S0tL/0dH
        R/9DQ0P/PDw8/zk5Of81NTX/MDAw/ywsLP8kJCT/BwcHIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGNjY0tjY2OaYGBg31RU
        VP9MTEz/SEhI/0NDQ/8/Pz//Ozs7/zY2Nv8wMDD/LCws/yIiItwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAioqKJWxsbGhYWFitTExM7T8/P/86Ojr/NTU1/zAwMP8sLCz/Hh4elwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUDVVVVNj8/P3k2Nja8Li4u9ysrK/8ZGRlTAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBACDQ0NCcuLi5UIyMjfBER
        EQ8AAAAAAAAAAAAAAAAAAAAA//////////////+f///4D///gA///gAP//wAD//8AAf/wAAH/wAAB/4A
        AAf8AAAD+AAAA/AAAAPgAAADwAAAB8AAAAfAAAAH4AAAB/AAAAP4AAAD/AAAA/4AAAf/AAAH/4AAB//8
        AAf//AAP//4AD///AA////AP////H/////8=
</value>
  </data>
</root>